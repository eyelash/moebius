let input = [1, 0, 0, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 1, 9, 19, 1, 5, 19, 23, 1, 6, 23, 27, 1, 27, 10, 31, 1, 31, 5, 35, 2, 10, 35, 39, 1, 9, 39, 43, 1, 43, 5, 47, 1, 47, 6, 51, 2, 51, 6, 55, 1, 13, 55, 59, 2, 6, 59, 63, 1, 63, 5, 67, 2, 10, 67, 71, 1, 9, 71, 75, 1, 75, 13, 79, 1, 10, 79, 83, 2, 83, 13, 87, 1, 87, 6, 91, 1, 5, 91, 95, 2, 95, 9, 99, 1, 5, 99, 103, 1, 103, 6, 107, 2, 107, 13, 111, 1, 111, 10, 115, 2, 10, 115, 119, 1, 9, 119, 123, 1, 123, 9, 127, 1, 13, 127, 131, 2, 10, 131, 135, 1, 135, 5, 139, 1, 2, 139, 143, 1, 143, 5, 0, 99, 2, 0, 14, 0]

func putChar(c) = @putChar(c)

func length(array) = @arrayLength(array)
func get(array, index) = @arrayGet(array, index)
func set(array, index, newElement) = @arraySplice(array, index, 1, newElement)
func push(array, element) = @arraySplice(array, @arrayLength(array), 0, element)
func concat(array1, array2) = @arraySplice(array1, @arrayLength(array1), 0, array2)

func toString(n) = {
	func toString(n, prefix): Array =
		if (n < 10)
			prefix.push('0' + n)
		else
			toString(n / 10, prefix).push('0' + (n % 10))
	return if (n < 0) toString(0 - n, "-") else toString(n, "")
}

func putStrLn(s) = {
	func putStrLn(s, i): Void =
		if (i < s.length())
			putChar(s.get(i)) >> putStrLn(s, i + 1)
		else
			putChar('\n')
	return putStrLn(s, 0)
}

func getOp(opcode) =
	func(x, y)
		if (opcode == 1)
			x + y
		else if (opcode == 2)
			x * y
		else
			0

func runProgram(p, noun, verb) = {
	let p = p.set(1, noun)
	let p = p.set(2, verb)
	func step(p, i): Int =
		if (p.get(i) == 99)
			p.get(0)
		else {
			let opcode = p.get(i)
			let arg1 = p.get(p.get(i + 1))
			let arg2 = p.get(p.get(i + 2))
			let dst = p.get(i + 3)
			let p = p.set(dst, getOp(opcode)(arg1, arg2))
			return step(p, i + 4)
		}
	return step(p, 0)
}

func findInputs(p) = {
	func iterate(p, noun, verb): Void =
		if (noun < 99)
			if (verb < 99)
				if (runProgram(p, noun, verb) == 19690720)
					putStrLn(concat("noun = ", toString(noun))) >>
					putStrLn(concat("verb = ", toString(verb))) >>
					putStrLn(concat("100 * noun + verb = ", toString(100 * noun + verb)))
				else
					iterate(p, noun, verb + 1)
			else
				iterate(p, noun + 1, 0)
		else
			putStrLn("no solution found")
	return iterate(p, 0, 0)
}

return findInputs(input)
